@page
@model BookReviewWeb.Pages.Library.DetailsModel

@{
    ViewData["Title"] = $"{Model.Book.Title} - Book Details";
}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
<link rel="stylesheet" href="~/css/detailsstyle.css" />
<div class="container py-4">
    <!-- Display error message if present -->
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="d-flex justify-content-between mb-3">
        <partial name="BookDetailsPage/_BackToLibrary" />
        
        @if (User.IsInRole("Admin"))
        {
            <div class="admin-actions">
                <a asp-page="Edit" asp-route-id="@Model.Book.Id" class="btn btn-primary me-2">
                    <i class="fas fa-edit me-1"></i> Edit
                </a>
                <a asp-page="Delete" asp-route-id="@Model.Book.Id" class="btn btn-danger">
                    <i class="fas fa-trash me-1"></i> Delete
                </a>
            </div>
        }
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-body p-0">
            <div class="row g-0">
                <!-- Book Cover (Left Side) -->
                <div class="col-md-4 book-cover-container">
                    <partial name="BookDetailsPage/_BookCover" model="Model.Book" />
                </div>

                <!-- Book Details (Right Side) -->
                <div class="col-md-8">
                    <div class="card-body p-4">
                        <partial name="BookDetailsPage/_BookHeader" model="Model.Book" />

                        <partial name="BookDetailsPage/_BookDescription" model="Model.Book" />

                        <partial name="BookDetailsPage/_BookMetadata" model="Model.Book" />
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="dropdown my-2">
                                <button class="btn btn-primary dropdown-toggle" type="button" id="addToMyBooksButton" data-bs-toggle="dropdown" aria-expanded="false">
                                    @if (Model.UserBookEntry != null)
                                    {
                                        @BookReviewWeb.Pages.User.MyBooksModel.GetStatusName(Model.UserBookEntry.Status)
                                    }
                                    else
                                    {
                                        <text>Add to My Books</text>
                                    }
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="addToMyBooksButton">
                                    <li>
                                        <form method="post" asp-page-handler="AddToMyBooks" asp-route-bookId="@Model.Book.Id" asp-route-status="1">
                                            <button type="submit" class="dropdown-item">Plan to Read</button>
                                        </form>
                                    </li>
                                    <li>
                                        <form method="post" asp-page-handler="AddToMyBooks" asp-route-bookId="@Model.Book.Id" asp-route-status="2">
                                            <button type="submit" class="dropdown-item">Currently Reading</button>
                                        </form>
                                    </li>
                                    <li>
                                        <form method="post" asp-page-handler="AddToMyBooks" asp-route-bookId="@Model.Book.Id" asp-route-status="3">
                                            <button type="submit" class="dropdown-item">Dropped</button>
                                        </form>
                                    </li>
                                    <li>
                                        <form method="post" asp-page-handler="AddToMyBooks" asp-route-bookId="@Model.Book.Id" asp-route-status="4">
                                            <button type="submit" class="dropdown-item">Completed</button>
                                        </form>
                                    </li>
                                    @if (Model.UserBookEntry != null)
                                    {
                                        <li><hr class="dropdown-divider" /></li>
                                        <li>
                                            <form method="post" asp-page-handler="RemoveFromMyBooks" asp-route-bookId="@Model.Book.Id">
                                                <button type="submit" class="dropdown-item text-danger">Remove from My Books</button>
                                            </form>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h3 class="mb-0">Reviews</h3>
        </div>
        <div class="card-body">
            @if (User.Identity.IsAuthenticated)
            {
                <!-- Add Review Form for logged in users -->
                <div class="mb-4 p-3 border rounded">
                    <h4>Write a Review</h4>
                    <form method="post" id="reviewForm">
                        <input type="hidden" asp-for="ReviewInput.BookId" value="@Model.Book.Id" />
                        <input type="hidden" id="ratingInput" asp-for="ReviewInput.Rating" value="0" />
                        
                        <div class="mb-3">
                            <label class="form-label">Rating</label>
                            <div class="star-rating">
                                <i class="bi bi-star star-item" data-rating="1"></i>
                                <i class="bi bi-star star-item" data-rating="2"></i>
                                <i class="bi bi-star star-item" data-rating="3"></i>
                                <i class="bi bi-star star-item" data-rating="4"></i>
                                <i class="bi bi-star star-item" data-rating="5"></i>
                                <span id="ratingValue" class="ms-2 text-muted">0/5</span>
                            </div>
                            <span asp-validation-for="ReviewInput.Rating" class="text-danger"></span>
                        </div>
                        
                        <div class="mb-3">
                            <label asp-for="ReviewInput.Comment" class="form-label">Content</label>
                            <textarea asp-for="ReviewInput.Comment" class="form-control" rows="3"></textarea>
                            <span asp-validation-for="ReviewInput.Comment" class="text-danger"></span>
                        </div>
                        
                        <button type="submit" class="btn btn-primary">Submit Review</button>
                    </form>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> 
                    Please <a asp-page="/Auth/Login" asp-route-returnUrl="@Request.Path">log in</a> to leave a review.
                </div>
            }

            <!-- Display existing reviews -->
            <h4 class="mt-4 mb-3">@Model.ReviewCount Review@(Model.ReviewCount != 1 ? "s" : "")</h4>
            
            @if (!Model.HasReviews)
            {
                <div class="alert alert-light">
                    <i class="bi bi-chat-square-text"></i> No reviews yet. Be the first to review this book!
                </div>
            }
            else
            {
                <div class="review-list">
                    @foreach (var review in Model.Book.Reviews.OrderByDescending(r => r.CreatedAt))
                    {
                        ViewData["UserReviewCount"] = Model.UserReviewCounts[review.UserId];
                        ViewData["ReviewVotes"] = Model.ReviewVoteCounts[review.Id];
                        ViewData["UserVoteType"] = 0;
                        if (User.Identity.IsAuthenticated && Model.UserVotes.ContainsKey(review.Id))
                        {
                            ViewData["UserVoteType"] = Model.UserVotes[review.Id];
                        }
                        
                        <partial name="_BookDetailReviewCard" model="review" />
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reviewModalLabel">Review Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="review-modal-content">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="d-flex align-items-center">
                            <h4 class="modal-username mb-0 me-2"></h4>
                            <span class="badge bg-secondary modal-review-count">
                                <i class="bi bi-pencil-fill me-1"></i><span class="count-value"></span>
                            </span>
                        </div>
                        <span class="text-muted modal-date"></span>
                    </div>
                    
                    <div class="rating mb-3">
                        <span class="modal-rating"></span>
                    </div>
                    
                    <div class="review-content mb-4">
                        <p class="modal-comment"></p>
                    </div>
                    
                    <div class="review-stats d-flex">
                        <div class="me-3">
                            <i class="bi bi-hand-thumbs-up-fill text-primary"></i>
                            <span class="modal-upvotes"></span> upvotes
                        </div>
                        <div>
                            <i class="bi bi-hand-thumbs-down-fill text-danger"></i>
                            <span class="modal-downvotes"></span> downvotes
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <style>
        .star-rating {
            display: flex;
            align-items: center;
            font-size: 24px;
        }
        
        .star-item {
            cursor: pointer;
            margin-right: 5px;
        }
        
        .star-item.active {
            color: #ffc107;
        }
        
        .star-item:hover {
            color: #ffc107;
        }
        
        .star-item.active ~ .star-item:hover {
            color: inherit;
        }

        .review-card {
            transition: all 0.2s ease-in-out;
        }
        
        .review-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .truncated-text {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            position: relative;
            min-height: 50px;
        }
        
        .review-content p {
            white-space: pre-wrap;
        }

        .user-review-count {
            font-size: 0.75rem;
            cursor: help;
        }
    </style>
    <script>
        // Function to open review modal - globally accessible
        function openReviewModal(reviewCard) {
            const reviewData = reviewCard.querySelector('.review-data');
            const username = reviewData.querySelector('.review-username').textContent;
            const date = reviewData.querySelector('.review-date').textContent;
            const rating = parseInt(reviewData.querySelector('.review-rating').textContent);
            const comment = reviewData.querySelector('.review-comment').textContent;
            const reviewCount = reviewData.querySelector('.review-count').textContent;
            const upvotes = reviewData.querySelector('.review-upvotes').textContent;
            const downvotes = reviewData.querySelector('.review-downvotes').textContent;
            
            // Set modal content
            document.querySelector('.modal-username').textContent = username;
            document.querySelector('.modal-date').textContent = date;
            document.querySelector('.count-value').textContent = reviewCount;
            document.querySelector('.modal-comment').textContent = comment;
            document.querySelector('.modal-upvotes').textContent = upvotes;
            document.querySelector('.modal-downvotes').textContent = downvotes;
            
            // Set rating stars
            let starsHtml = '';
            for (let i = 1; i <= 5; i++) {
                if (i <= rating) {
                    starsHtml += '<i class="bi bi-star-fill text-warning me-1" style="font-size: 1.5rem;"></i>';
                } else {
                    starsHtml += '<i class="bi bi-star text-muted me-1" style="font-size: 1.5rem;"></i>';
                }
            }
            starsHtml += `<span class="ms-2">${rating}/5</span>`;
            document.querySelector('.modal-rating').innerHTML = starsHtml;
            
            // Show modal
            const reviewModal = new bootstrap.Modal(document.getElementById('reviewModal'));
            reviewModal.show();
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Existing star rating code
            const stars = document.querySelectorAll('.star-item');
            const ratingInput = document.getElementById('ratingInput');
            const ratingValue = document.getElementById('ratingValue');
            const reviewForm = document.getElementById('reviewForm');
            
            // Function to update stars display
            function updateStars(rating) {
                stars.forEach(star => {
                    const starRating = parseInt(star.getAttribute('data-rating'));
                    if (starRating <= rating) {
                        star.classList.add('active');
                        star.classList.remove('bi-star');
                        star.classList.add('bi-star-fill');
                    } else {
                        star.classList.remove('active');
                        star.classList.add('bi-star');
                        star.classList.remove('bi-star-fill');
                    }
                });
                ratingValue.textContent = rating + '/5';
                ratingInput.value = rating;
            }
            
            // Add click events to stars
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const rating = parseInt(this.getAttribute('data-rating'));
                    updateStars(rating);
                });
                
                // Add hover effect
                star.addEventListener('mouseenter', function() {
                    const rating = parseInt(this.getAttribute('data-rating'));
                    stars.forEach(s => {
                        const starRating = parseInt(s.getAttribute('data-rating'));
                        if (starRating <= rating) {
                            s.classList.add('bi-star-fill');
                            s.classList.remove('bi-star');
                        }
                    });
                });
                
                star.addEventListener('mouseleave', function() {
                    const currentRating = parseInt(ratingInput.value);
                    stars.forEach(s => {
                        const starRating = parseInt(s.getAttribute('data-rating'));
                        if (starRating <= currentRating) {
                            s.classList.add('bi-star-fill');
                            s.classList.remove('bi-star');
                        } else {
                            s.classList.add('bi-star');
                            s.classList.remove('bi-star-fill');
                        }
                    });
                });
            });
            
            // Validate form submission
            reviewForm.addEventListener('submit', function(e) {
                if (parseInt(ratingInput.value) === 0) {
                    e.preventDefault();
                    alert('Please select a rating before submitting your review.');
                }
            });
        });
    </script>
}
